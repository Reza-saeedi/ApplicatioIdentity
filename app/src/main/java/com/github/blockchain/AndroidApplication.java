package com.github.blockchain;

import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

import io.reactivex.Flowable;


/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.6.0.
 */
public class AndroidApplication extends Contract {
    private static final String BINARY = "";

    public static final String FUNC_ADDAPPLICATION = "addApplication";

    public static final String FUNC_RSAVERIFY = "RSAVerify";

    public static final String FUNC_VERIFYAPPLICATION = "verifyApplication";

    public static final String FUNC_APPLICATIONDATABASE = "ApplicationDatabase";

    public static final String FUNC_PKCS1SHA256VERIFY = "pkcs1Sha256Verify";

    public static final String FUNC_GETVERIFIERAPP = "getVerifierApp";

    public static final String FUNC_GETVERIFIEDAPP = "getVerifiedApp";

    public static final String FUNC_ISAPPVERIFYBYDEVELOPER = "isAppVerifyBydeveloper";

    public static final Event APPLICATIONADDED_EVENT = new Event("ApplicationAdded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event APPLICATIONVERIFIED_EVENT = new Event("ApplicationVerified", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
    ;

    @Deprecated
    protected AndroidApplication(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected AndroidApplication(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected AndroidApplication(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected AndroidApplication(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<TransactionReceipt> addApplication(String app_packageName, String app_name, String app_publicKey, String app_N_of_publicKey, String app_webSite, String app_challeng) {
        final Function function = new Function(
                FUNC_ADDAPPLICATION, 
                Arrays.<Type>asList(new Utf8String(app_packageName),
                new Utf8String(app_name),
                new Utf8String(app_publicKey),
                new Utf8String(app_N_of_publicKey),
                new Utf8String(app_webSite),
                new Utf8String(app_challeng)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> RSAVerify(byte[] _data, byte[] _s, byte[] _e, byte[] _m) {
        final Function function = new Function(FUNC_RSAVERIFY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(_data), 
                new org.web3j.abi.datatypes.DynamicBytes(_s), 
                new org.web3j.abi.datatypes.DynamicBytes(_e), 
                new org.web3j.abi.datatypes.DynamicBytes(_m)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> verifyApplication(String app_packageName, String app_name, String app_publicKey, BigInteger myAppId) {
        final Function function = new Function(
                FUNC_VERIFYAPPLICATION, 
                Arrays.<Type>asList(new Utf8String(app_packageName),
                new Utf8String(app_name),
                new Utf8String(app_publicKey),
                new Uint256(myAppId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple5<String, String, String, String, String>> ApplicationDatabase(String param0, BigInteger param1) {
        final Function function = new Function(FUNC_APPLICATIONDATABASE, 
                Arrays.<Type>asList(new Address(param0),
                new Uint256(param1)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple5<String, String, String, String, String>>(
                new Callable<Tuple5<String, String, String, String, String>>() {
                    @Override
                    public Tuple5<String, String, String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, String, String, String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> pkcs1Sha256Verify(byte[] _sha256, byte[] _s, byte[] _e, byte[] _m) {
        final Function function = new Function(FUNC_PKCS1SHA256VERIFY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_sha256), 
                new org.web3j.abi.datatypes.DynamicBytes(_s), 
                new org.web3j.abi.datatypes.DynamicBytes(_e), 
                new org.web3j.abi.datatypes.DynamicBytes(_m)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> getVerifierApp(BigInteger myAppId) {
        final Function function = new Function(FUNC_GETVERIFIERAPP, 
                Arrays.<Type>asList(new Uint256(myAppId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> getVerifiedApp(String app_packageName, String app_name, String app_signature) {
        final Function function = new Function(FUNC_GETVERIFIEDAPP, 
                Arrays.<Type>asList(new Utf8String(app_packageName),
                new Utf8String(app_name),
                new Utf8String(app_signature)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> isAppVerifyBydeveloper(String app_packageName, String app_name, String app_signature) {
        final Function function = new Function(FUNC_ISAPPVERIFYBYDEVELOPER, 
                Arrays.<Type>asList(new Utf8String(app_packageName),
                new Utf8String(app_name),
                new Utf8String(app_signature)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public static RemoteCall<AndroidApplication> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(AndroidApplication.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<AndroidApplication> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(AndroidApplication.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<AndroidApplication> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(AndroidApplication.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<AndroidApplication> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(AndroidApplication.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public List<ApplicationAddedEventResponse> getApplicationAddedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(APPLICATIONADDED_EVENT, transactionReceipt);
        ArrayList<ApplicationAddedEventResponse> responses = new ArrayList<ApplicationAddedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ApplicationAddedEventResponse typedResponse = new ApplicationAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.app_packageName = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.app_name = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.app_publicKey = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApplicationAddedEventResponse> applicationAddedEventObservable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ApplicationAddedEventResponse>() {
            @Override
            public ApplicationAddedEventResponse apply(Log log) throws Exception {
                EventValuesWithLog eventValues = extractEventParametersWithLog(APPLICATIONADDED_EVENT, log);
                ApplicationAddedEventResponse typedResponse = new ApplicationAddedEventResponse();
                typedResponse.log = log;
                typedResponse.app_packageName = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.app_name = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.app_publicKey = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });

    }

    public Flowable<ApplicationAddedEventResponse> applicationAddedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPLICATIONADDED_EVENT));
        return applicationAddedEventObservable(filter);
    }

    public List<ApplicationVerifiedEventResponse> getApplicationVerifiedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(APPLICATIONVERIFIED_EVENT, transactionReceipt);
        ArrayList<ApplicationVerifiedEventResponse> responses = new ArrayList<ApplicationVerifiedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ApplicationVerifiedEventResponse typedResponse = new ApplicationVerifiedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.app_packageName = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.app_name = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.app_publicKey = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.owner = (String) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApplicationVerifiedEventResponse> applicationVerifiedEventObservable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ApplicationVerifiedEventResponse>() {
            @Override
            public ApplicationVerifiedEventResponse apply(Log log) throws Exception {
                EventValuesWithLog eventValues = extractEventParametersWithLog(APPLICATIONVERIFIED_EVENT, log);
                ApplicationVerifiedEventResponse typedResponse = new ApplicationVerifiedEventResponse();
                typedResponse.log = log;
                typedResponse.app_packageName = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.app_name = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.app_publicKey = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.owner = (String) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApplicationVerifiedEventResponse> applicationVerifiedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPLICATIONVERIFIED_EVENT));
        return applicationVerifiedEventObservable(filter);
    }

    @Deprecated
    public static AndroidApplication load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new AndroidApplication(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static AndroidApplication load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new AndroidApplication(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static AndroidApplication load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new AndroidApplication(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static AndroidApplication load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new AndroidApplication(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static class ApplicationAddedEventResponse {
        public Log log;

        public String app_packageName;

        public String app_name;

        public String app_publicKey;
    }

    public static class ApplicationVerifiedEventResponse {
        public Log log;

        public String app_packageName;

        public String app_name;

        public String app_publicKey;

        public String owner;
    }
}
